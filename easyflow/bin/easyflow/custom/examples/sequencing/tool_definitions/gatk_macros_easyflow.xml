<?xml version="1.0" encoding="UTF-8"?>
<macros xmlns="urn:de.thiema.easyflow/types">
  <template name="standard_gatk_options">      
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == "advanced":
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree "${pedigree.pedigree_file}"'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString "${pedigree_string.pedigree_string}"'
        #end for
        -p '--pedigreeValidationType "${gatk_param_type.pedigree_validation_type}"'
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter "${read_filter.read_filter_type.read_filter_type_selector}"
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ "__current_case__", "read_filter_type_selector" ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} "${param}"
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d "--intervals" "${input_intervals.input_intervals}" "${input_intervals.input_intervals.ext}" "input_intervals_${interval_count}"
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d "--excludeIntervals" "${input_intervals.input_exclude_intervals}" "${input_intervals.input_exclude_intervals.ext}" "input_exlude_intervals_${interval_count}"
        #end for

        -p '--interval_set_rule "${gatk_param_type.interval_set_rule}"'
        
        -p '--downsampling_type "${gatk_param_type.downsampling_type.downsampling_type_selector}"'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != "NONE":
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} "${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}"'
        #end if
        -p '
        --baq "${gatk_param_type.baq}"
        --baqGapOpenPenalty "${gatk_param_type.baq_gap_open_penalty}"
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities "${gatk_param_type.default_base_qualities}"
        --validation_strictness "${gatk_param_type.validation_strictness}"
        --interval_merging "${gatk_param_type.interval_merging}"
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == "file":
                -d "--read_group_black_list" "${rg_black_list.read_group_black_list_type.read_group_black_list}" "txt" "input_read_group_black_list_${rg_black_list_count}"
            #else
                -p '--read_group_black_list "${rg_black_list.read_group_black_list_type.read_group_black_list}"'
            #end if
        #end for
    #end if
    
    #if str( $reference_source.reference_source_selector ) == "history":
        -d "-R" "${reference_source.ref_file}" "${reference_source.ref_file.ext}" "gatk_input"
    #end if
    ##end standard gatk options
  </template>
  <xml name="gatk_param_type_conditional">
      <conditional name="gatk_param_type">
         <param name="gatk_param_type_selector" type="select"
                label="Basic or Advanced GATK options"/>
         <when value="basic">
        
      </when>
         <when value="advanced">
            <param name="pedigree_file" type="data" format="txt"
                   help="-ped,--pedigree &amp;lt;pedigree&amp;gt;"
                   label="Pedigree files for samples"
                   multiple="true"/>
            <param name="pedigree_string" type="text"
                   help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;"
                   label="Pedigree string for samples"
                   multiple="true"/>
            <param name="pedigree_validation_type" type="select"
                   help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;"
                   label="How strict should we be in validating the pedigree information">
               <key type="short">pedValidationType</key>
               <key type="long">pedigreeValidationType</key>
            </param>
            <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type"/>
              <when value="BadCigar">
                  
              </when>
              <when value="BadMate">
                  
              </when>
              <when value="DuplicateRead">
                  
              </when>
              <when value="FailsVendorQualityCheck">
                  
              </when>
              <when value="MalformedRead">
                  
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer"
                         label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  
              </when>
              <when value="MappingQualityZero">
                  
              </when>
              <when value="MateSameStrand">
                  
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer"
                         label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  
              </when>
              <when value="NoOriginalQualityScores">
                  
              </when>
              <when value="NotPrimaryAlignment">
                  
              </when>
              <when value="Platform454">
                  
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text"
                         label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  
              </when>
              <when value="ReadGroupBlackList">
                  
              </when>
              <when value="ReadName">
                  <param name="readName" type="text"
                         label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean"
                         label="Discard reads on the forward strand"
                         defaultValue="true">
                     <key type="long">filterPositive</key>
                  </param>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer"
                         label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text"
                         label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer"
                         label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  
              </when>
            </conditional>
            <param name="input_intervals" type="data"
                   format="bed,gatk_interval,picard_interval_list,vcf"
                   help="-L,--intervals &amp;lt;intervals&amp;gt;"
                   label="Genomic intervals"
                   multiple="true"/>
            <param name="input_exclude_intervals" type="data"
                   format="bed,gatk_interval,picard_interval_list,vcf"
                   help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;"
                   label="Genomic intervals"
                   multiple="true"/>
        
            <param name="interval_set_rule" type="select"
                   help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;"
                   label="Interval set rule">
               <key type="short">isr</key>
               <key type="long">interval_set_rule</key>
            </param>
        
            <conditional name="downsampling_type">
               <param name="downsampling_type_selector" type="select"
                      help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;"
                      label="Type of reads downsampling to employ at a given locus">
                  <key type="short">dt</key>
                  <key type="long">downsampling_type</key>
               </param>
               <when value="NONE">
              
          </when>
               <when value="ALL_READS">
                  <conditional name="downsample_to_type">
                     <param name="downsample_to_type_selector" type="select" label="Downsample method"/>
                     <when value="downsample_to_fraction">
                        <param name="downsample_to_value" type="float"
                               help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"
                               label="Fraction [0.0-1.0] of reads to downsample to">
                           <key type="short">dfrac</key>
                           <key type="long">downsample_to_fraction</key>
                        </param>
                     </when>
                     <when value="downsample_to_coverage">
                        <param name="downsample_to_value" type="integer"
                               help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"
                               label="Coverage to downsample to at any given locus">
                           <key type="short">dcov</key>
                           <key type="long">downsample_to_coverage</key>
                        </param>
                     </when>
                  </conditional>
               </when>
               <when value="BY_SAMPLE">
                  <conditional name="downsample_to_type">
                     <param name="downsample_to_type_selector" type="select" label="Downsample method"/>
                     <when value="downsample_to_fraction">
                        <param name="downsample_to_value" type="float"
                               help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"
                               label="Fraction [0.0-1.0] of reads to downsample to">
                           <key type="short">dfrac</key>
                           <key type="long">downsample_to_fraction</key>
                        </param>
                     </when>
                     <when value="downsample_to_coverage">
                        <param name="downsample_to_value" type="integer"
                               help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"
                               label="Coverage to downsample to at any given locus">
                           <key type="short">dcov</key>
                           <key type="long">downsample_to_coverage</key>
                        </param>
                     </when>
                  </conditional>
               </when>
            </conditional>
            <param name="baq" type="select" help="-baq,--baq &amp;lt;baq&amp;gt;"
                   label="Type of BAQ calculation to apply in the engine">
               <key type="short">baq</key>
               <key type="long">baq</key>
            </param>
            <param name="baq_gap_open_penalty" type="float"
                   help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;"
                   label="BAQ gap open penalty (Phred Scaled)">
               <key>Default</key>
            </param>
            <param name="use_original_qualities" type="boolean" help="-OQ,--useOriginalQualities"
                   label="Use the original base quality scores from the OQ tag"
                   defaultValue="true">
               <key type="long">useOriginalQualities</key>
               <key type="short">OQ</key>
            </param>
            <param name="default_base_qualities" type="integer"
                   help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"
                   label="Value to be used for all base quality scores, when some are missing">
               <key type="short">DBQ</key>
               <key type="long">defaultBaseQualities</key>
            </param>
            <param name="validation_strictness" type="select"
                   help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;"
                   label="How strict should we be with validation">
               <key type="short">S</key>
               <key type="long">validation_strictness</key>
            </param>
            <param name="interval_merging" type="select"
                   help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;"
                   label="Interval merging rule">
               <key type="short">im</key>
               <key type="long">interval_merging</key>
            </param>
        
            <conditional name="read_group_black_list_type">
               <param name="read_group_black_list_type_selector" type="select"
                      label="Type of reads read group black list"/>
               <when value="file">
                  <param name="read_group_black_list" type="data" format="txt"
                         label="Read group black list file"/>
               </when>
               <when value="text">
                  <param name="read_group_black_list" type="text"
                         label="Read group black list tag:string"/>
               </when>
            </conditional>
        
            <param name="disable_experimental_low_memory_sharding" type="boolean"
                   help="--disable_experimental_low_memory_sharding"
                   label="Disable experimental low-memory sharding functionality."
                   defaultValue="true">
               <key type="long">disable_experimental_low_memory_sharding</key>
            </param>
            <param name="non_deterministic_random_seed" type="boolean"
                   help="-ndrs,--nonDeterministicRandomSeed"
                   label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run"
                   defaultValue="true">
               <key type="long">nonDeterministicRandomSeed</key>
               <key type="short">ndrs</key>
            </param>
        
         </when>
      </conditional>    
  </xml>
  <xml name="analysis_type_conditional">
      <conditional name="analysis_param_type">
         <param name="analysis_param_type_selector" type="select"
                label="Basic or Advanced Analysis options"/>
         <when value="basic">
        
      </when>
         <when value="advanced">
            <yield/>
         </when>
      </conditional>
  </xml>
  <xml name="reference_source_selector_param">
      <param name="reference_source_selector" type="select"
             label="Choose the source for the reference list"/>
  </xml>
  <token name="@CITATION_SECTION@">------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </token>
</macros>