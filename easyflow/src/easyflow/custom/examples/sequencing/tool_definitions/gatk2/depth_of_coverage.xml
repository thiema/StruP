<?xml version="1.0" encoding="UTF-8"?>
<tool xmlns="urn:de.thiema.easyflow/types"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:de.thiema.easyflow/types Easyflow.xsd"
      id="gatk2_depth_of_coverage"
      name="Depth of Coverage"
      version="0.0.7">
  <description>on BAM files</description>
  <requirements>
      <requirement type="package" version="2.3">gatk</requirement>
      <requirement type="package" version="0.1.18">samtools</requirement>
  </requirements>
  
  
    <param name="input_bam" type="data" format="bam"
          help="-I,--input_file &amp;lt;input_file&amp;gt;"
          label="BAM file"
          multiple="true"
          min_occur="1"/>
   <param name="ref_file" type="data" format="fasta"
          help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;"
          label="Using reference file">
      <key type="short">R</key>
      <key type="long">reference_sequence</key>
   </param>
    
    <param name="input_calculate_coverage_over_genes" type="data" format="data"
          help="-geneList,--calculateCoverageOverGenes &amp;lt;calculateCoverageOverGenes&amp;gt;"
          label="RefSeq Rod"
          optional="true">
      <key type="short">geneList</key>
      <key type="long">calculateCoverageOverGenes</key>
   </param>
    
    <param name="partition_type" type="select"
          help="-pt,--partitionType &amp;lt;partitionType&amp;gt;"
          label="Partition type for depth of coverage">
      <key type="short">pt</key>
      <key type="long">partitionType</key>
   </param>
    
    <param name="summary_coverage_threshold" type="integer"
          help="-ct,--summaryCoverageThreshold &amp;lt;summaryCoverageThreshold&amp;gt;"
          label="for summary file outputs, report the % of bases covered to &gt;= this number"
          multiple="true"/>
    
    <param name="output_format" type="select" help="--outputFormat &amp;lt;outputFormat&amp;gt;"
          label="Output format">
      <key type="long">outputFormat</key>
   </param>
    
    <conditional name="gatk_param_type">
      <param name="gatk_param_type_selector" type="select"
             label="Basic or Advanced GATK options"/>
      <when value="basic">
        
      </when>
      <when value="advanced">
        <param name="pedigree_file" type="data" format="txt"
                help="-ped,--pedigree &amp;lt;pedigree&amp;gt;"
                label="Pedigree files for samples"
                multiple="true"/>
        <param name="pedigree_string" type="text"
                help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;"
                label="Pedigree string for samples"
                multiple="true"/>
        <param name="pedigree_validation_type" type="select"
                help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;"
                label="How strict should we be in validating the pedigree information">
            <key type="short">pedValidationType</key>
            <key type="long">pedigreeValidationType</key>
         </param>
        <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type"/>
              <when value="BadCigar">
                  
              </when>
              <when value="BadMate">
                  
              </when>
              <when value="DuplicateRead">
                  
              </when>
              <when value="FailsVendorQualityCheck">
                  
              </when>
              <when value="MalformedRead">
                  <param name="filter_mismatching_base_and_quals" type="boolean"
                      help="filter out the mismatch reads instead of quitting with an error"
                      label="filter out the reads with mismatching number of bases and base qualities"
                      defaultValue="true">
                  <key type="long">filter_mismatching_base_and_quals</key>
                  <key>filter</key>
               </param>
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer"
                      label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  
              </when>
              <when value="MappingQualityZero">
                  
              </when>
              <when value="MateSameStrand">
                  
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer"
                      label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  
              </when>
              <when value="NoOriginalQualityScores">
                  
              </when>
              <when value="NotPrimaryAlignment">
                  
              </when>
              <when value="Platform454">
                  
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text"
                      label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  
              </when>
              <when value="ReadGroupBlackList">
                  
              </when>
              <when value="ReadName">
                  <param name="readName" type="text"
                      label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean"
                      label="Discard reads on the forward strand"
                      defaultValue="true">
                  <key type="long">filterPositive</key>
               </param>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer"
                      label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text"
                      label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer"
                      label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  
              </when>
            </conditional>
        <param name="input_intervals" type="data"
                format="bed,gatk_interval,picard_interval_list,vcf"
                help="-L,--intervals &amp;lt;intervals&amp;gt;"
                label="Genomic intervals"
                multiple="true"/>
        <param name="input_exclude_intervals" type="data"
                format="bed,gatk_interval,picard_interval_list,vcf"
                help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;"
                label="Genomic intervals"
                multiple="true"/>
        
        <param name="interval_set_rule" type="select"
                help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;"
                label="Interval set rule">
            <key type="short">isr</key>
            <key type="long">interval_set_rule</key>
         </param>
        
        <conditional name="downsampling_type">
            <param name="downsampling_type_selector" type="select"
                   help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;"
                   label="Type of reads downsampling to employ at a given locus">
               <key type="short">dt</key>
               <key type="long">downsampling_type</key>
            </param>
            <when value="NONE">
              
          </when>
            <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method"/>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float"
                            help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"
                            label="Fraction [0.0-1.0] of reads to downsample to">
                        <key type="short">dfrac</key>
                        <key type="long">downsample_to_fraction</key>
                     </param>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer"
                            help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"
                            label="Coverage to downsample to at any given locus">
                        <key type="short">dcov</key>
                        <key type="long">downsample_to_coverage</key>
                     </param>
                  </when>
              </conditional>
            </when>
            <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method"/>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float"
                            help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"
                            label="Fraction [0.0-1.0] of reads to downsample to">
                        <key type="short">dfrac</key>
                        <key type="long">downsample_to_fraction</key>
                     </param>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer"
                            help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"
                            label="Coverage to downsample to at any given locus">
                        <key type="short">dcov</key>
                        <key type="long">downsample_to_coverage</key>
                     </param>
                  </when>
              </conditional>
            </when>
        </conditional>
        <param name="baq" type="select" help="-baq,--baq &amp;lt;baq&amp;gt;"
                label="Type of BAQ calculation to apply in the engine">
            <key type="short">baq</key>
            <key type="long">baq</key>
         </param>
        <param name="baq_gap_open_penalty" type="float"
                help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;"
                label="BAQ gap open penalty (Phred Scaled)">
            <key>Default</key>
         </param>
        <param name="use_original_qualities" type="boolean" help="-OQ,--useOriginalQualities"
                label="Use the original base quality scores from the OQ tag"
                defaultValue="true">
            <key type="long">useOriginalQualities</key>
            <key type="short">OQ</key>
         </param>
        <param name="default_base_qualities" type="integer"
                help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"
                label="Value to be used for all base quality scores, when some are missing">
            <key type="short">DBQ</key>
            <key type="long">defaultBaseQualities</key>
         </param>
        <param name="validation_strictness" type="select"
                help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;"
                label="How strict should we be with validation">
            <key type="short">S</key>
            <key type="long">validation_strictness</key>
         </param>
        <param name="interval_merging" type="select"
                help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;"
                label="Interval merging rule">
            <key type="short">im</key>
            <key type="long">interval_merging</key>
         </param>
        
        <conditional name="read_group_black_list_type">
            <param name="read_group_black_list_type_selector" type="select"
                   label="Type of reads read group black list"/>
            <when value="file">
              <param name="read_group_black_list" type="data" format="txt"
                      label="Read group black list file"/>
            </when>
            <when value="text">
              <param name="read_group_black_list" type="text"
                      label="Read group black list tag:string"/>
            </when>
          </conditional>
        
        <param name="disable_experimental_low_memory_sharding" type="boolean"
                help="--disable_experimental_low_memory_sharding"
                label="Disable experimental low-memory sharding functionality."
                defaultValue="true">
            <key type="long">disable_experimental_low_memory_sharding</key>
         </param>
        <param name="non_deterministic_random_seed" type="boolean"
                help="-ndrs,--nonDeterministicRandomSeed"
                label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run"
                defaultValue="true">
            <key type="long">nonDeterministicRandomSeed</key>
            <key type="short">ndrs</key>
         </param>
        <param name="fix_misencoded_quality_scores" type="boolean"
                help="-fixMisencodedQuals / --fix_misencoded_quality_scores"
                label="Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score."
                defaultValue="true">
            <key type="long">fix_misencoded_quality_scores</key>
            <key type="short">fixMisencodedQuals</key>
         </param>
        
      </when>
    </conditional>
    
    <conditional name="analysis_param_type">
      <param name="analysis_param_type_selector" type="select"
             label="Basic or Advanced Analysis options"/>
      <when value="basic">
        
      </when>
      <when value="advanced">
        <param name="ignore_deletion_sites" type="boolean" help="--ignoreDeletionSites"
                label="Ignore sites consisting only of deletions"
                defaultValue="true">
            <key type="long">ignoreDeletionSites</key>
         </param>
        <param name="include_deletions" type="boolean" help="-dels,--includeDeletions"
                label="Include information on deletions"
                defaultValue="true">
            <key type="long">includeDeletions</key>
            <key type="short">dels</key>
         </param>
        <param name="max_base_quality" type="integer"
                help="--maxBaseQuality &amp;lt;maxBaseQuality&amp;gt;"
                label="Maximum quality of bases to count towards depth">
            <key type="long">maxBaseQuality</key>
         </param>
        <param name="min_base_quality" type="integer"
                help="-mbq,--minBaseQuality &amp;lt;minBaseQuality&amp;gt;"
                label="Minimum quality of bases to count towards depth">
            <key type="short">mbq</key>
            <key type="long">minBaseQuality</key>
         </param>
        <param name="max_mapping_quality" type="integer"
                help="--maxMappingQuality &amp;lt;maxMappingQuality&amp;gt;"
                label="Maximum mapping quality of reads to count towards depth.">
            <key type="long">maxMappingQuality</key>
         </param>
        <param name="min_mapping_quality" type="integer"
                help="-mmq,--minMappingQuality &amp;lt;minMappingQuality&amp;gt;"
                label="Minimum mapping quality of reads to count towards depth">
            <key type="short">mmq</key>
            <key type="long">minMappingQuality</key>
         </param>
        <param name="n_bins" type="integer" help="--nBins &amp;lt;nBins&amp;gt;"
                label="Number of bins to use for granular binning">
            <key type="long">nBins</key>
         </param>
        <param name="omit_depth_output_at_each_base" type="boolean"
                help="-omitBaseOutput,--omitDepthOutputAtEachBase"
                label="Omit the output of the depth of coverage at each base"
                defaultValue="true">
            <key type="long">omitDepthOutputAtEachBase</key>
            <key type="short">omitBaseOutput</key>
         </param>
        <param name="omit_interval_statistics" type="boolean"
                help="-omitIntervals,--omitIntervalStatistics"
                label="Omit the per-interval statistics section"
                defaultValue="true">
            <key type="long">omitIntervalStatistics</key>
            <key type="short">omitIntervals</key>
         </param>
        <param name="omit_locus_table" type="boolean" help="-omitLocusTable,--omitLocusTable"
                label="Do not calculate the per-sample per-depth counts of loci"
                defaultValue="true">
            <key type="long">omitLocusTable</key>
            <key type="short">omitLocusTable</key>
         </param>
        <param name="omit_per_sample_stats" type="boolean"
                help="-omitSampleSummary,--omitPerSampleStats"
                label="Omit the summary files per-sample."
                defaultValue="true">
            <key type="long">omitPerSampleStats</key>
            <key type="short">omitSampleSummary</key>
         </param>
        <param name="print_base_counts" type="boolean" help="-baseCounts,--printBaseCounts"
                label="Add base counts to per-locus output"
                defaultValue="true">
            <key type="long">printBaseCounts</key>
            <key type="short">baseCounts</key>
         </param>
        <param name="print_bin_endpoints_and_exit" type="boolean"
                help="--printBinEndpointsAndExit"
                label="Print the bin values and exits immediately"
                defaultValue="true">
            <key type="long">printBinEndpointsAndExit</key>
         </param>
        <param name="start" type="integer" help="--start &amp;lt;start&amp;gt;"
                label="Starting (left endpoint) for granular binning">
            <key type="long">start</key>
         </param>
        <param name="stop" type="integer" help="--stop &amp;lt;stop&amp;gt;"
                label="Ending (right endpoint) for granular binning">
            <key type="long">stop</key>
         </param>
      </when>
    </conditional>
  
  
    <param name="output_per_locus_coverage" type="data" format="tabular"
          label="${tool.name} on ${on_string} (per locus coverage)"
          output="true"/>
    <param name="output_summary_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output summary sample)"
          output="true"/>
    <param name="output_statistics_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output statistics sample)"
          output="true"/>
    <param name="output_interval_summary_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval summary sample)"
          output="true"/>
    <param name="output_interval_statistics_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval statistics sample)"
          output="true"/>
    <param name="output_gene_summary_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene summary sample)"
          output="true"/>
    <param name="output_gene_statistics_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene statistics sample)"
          output="true"/>
    <param name="output_cumulative_coverage_counts_sample" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage counts sample)"
          output="true"/>
    <param name="output_cumulative_coverage_proportions_sample" type="data"
          format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage proportions sample)"
          output="true"/>
    
    <param name="output_summary_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output summary readgroup)"
          output="true"/>
    <param name="output_statistics_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output statistics readgroup)"
          output="true"/>
    <param name="output_interval_summary_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval summary readgroup)"
          output="true"/>
    <param name="output_interval_statistics_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval statistics readgroup)"
          output="true"/>
    <param name="output_gene_summary_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene summary readgroup)"
          output="true"/>
    <param name="output_gene_statistics_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene statistics readgroup)"
          output="true"/>
    <param name="output_cumulative_coverage_counts_readgroup" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage counts readgroup)"
          output="true"/>
    <param name="output_cumulative_coverage_proportions_readgroup" type="data"
          format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage proportions readgroup)"
          output="true"/>
    
    <param name="output_summary_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output summary library)"
          output="true"/>
    <param name="output_statistics_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output statistics library)"
          output="true"/>
    <param name="output_interval_summary_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval summary library)"
          output="true"/>
    <param name="output_interval_statistics_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output interval statistics library)"
          output="true"/>
    <param name="output_gene_summary_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene summary library)"
          output="true"/>
    <param name="output_gene_statistics_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output gene statistics library)"
          output="true"/>
    <param name="output_cumulative_coverage_counts_library" type="data" format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage counts library)"
          output="true"/>
    <param name="output_cumulative_coverage_proportions_library" type="data"
          format="tabular"
          label="${tool.name} on ${on_string} (output cumulative coverage proportions library)"
          output="true"/>
    
    <param name="output_log" type="data" format="tabular"
          label="${tool.name} on ${on_string} (log)"
          output="true"/>
  
    <data name="output_per_locus_coverage" format="tabular"
         label="${tool.name} on ${on_string} (per locus coverage)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_summary_sample" format="tabular"
         label="${tool.name} on ${on_string} (output summary sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_statistics_sample" format="tabular"
         label="${tool.name} on ${on_string} (output statistics sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_summary_sample" format="tabular"
         label="${tool.name} on ${on_string} (output interval summary sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_statistics_sample" format="tabular"
         label="${tool.name} on ${on_string} (output interval statistics sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_summary_sample" format="tabular"
         label="${tool.name} on ${on_string} (output gene summary sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_statistics_sample" format="tabular"
         label="${tool.name} on ${on_string} (output gene statistics sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_counts_sample" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage counts sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_proportions_sample" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage proportions sample)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'sample' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    
    <data name="output_summary_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output summary readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_statistics_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output statistics readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_summary_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output interval summary readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_statistics_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output interval statistics readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_summary_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output gene summary readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'readgroup' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_statistics_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output gene statistics readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'readgroup' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_counts_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage counts readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_proportions_readgroup" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage proportions readgroup)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>'readgroup' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    
    <data name="output_summary_library" format="tabular"
         label="${tool.name} on ${on_string} (output summary library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_statistics_library" format="tabular"
         label="${tool.name} on ${on_string} (output statistics library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_per_sample_stats'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_summary_library" format="tabular"
         label="${tool.name} on ${on_string} (output interval summary library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_interval_statistics_library" format="tabular"
         label="${tool.name} on ${on_string} (output interval statistics library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <filter>gatk_param_type['gatk_param_type_selector'] == "advanced" and len( gatk_param_type['input_interval_repeat'] )</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_interval_statistics'] == False</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_summary_library" format="tabular"
         label="${tool.name} on ${on_string} (output gene summary library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'library' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_gene_statistics_library" format="tabular"
         label="${tool.name} on ${on_string} (output gene statistics library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>input_calculate_coverage_over_genes is not None and 'library' in partition_type or not partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_counts_library" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage counts library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    <data name="output_cumulative_coverage_proportions_library" format="tabular"
         label="${tool.name} on ${on_string} (output cumulative coverage proportions library)">
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['omit_depth_output_at_each_base'] == False</filter>
        <filter>analysis_param_type['analysis_param_type_selector'] == "basic" or analysis_param_type['print_bin_endpoints_and_exit'] == False</filter>
        <filter>'library' in partition_type</filter>
        <actions>
            <conditional name="output_format">
                <when value="rtable">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
                <when value="csv">
                    <action type="format">
                        <option type="from_param" name="output_format"/>
                    </action>
                </when>
            </conditional>
        </actions>
    </data>
    
    <data name="output_log" format="tabular" label="${tool.name} on ${on_string} (log)"/>
  
  
  
  
</tool>